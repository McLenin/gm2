// ====================================================================
// This file is part of FlexibleSUSY.
//
// FlexibleSUSY is free software: you can redistribute it and/or modify
// it under the terms of the GNU General Public License as published
// by the Free Software Foundation, either version 3 of the License,
// or (at your option) any later version.
//
// FlexibleSUSY is distributed in the hope that it will be useful, but
// WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
// General Public License for more details.
//
// You should have received a copy of the GNU General Public License
// along with FlexibleSUSY.  If not, see
// <http://www.gnu.org/licenses/>.
// ====================================================================

// File generated at @DateAndTime@

#include "gm2_1loop.hpp"
#include "linalg.h"
#include "logger.hpp"
#include "wrappers.hpp"
#include "@ModelName@_two_scale_model.hpp"

namespace flexiblesusy {
namespace gm2 {

ComplexMatrix n_L(const @ModelName@<Two_scale>& model) {
   ComplexMatrix n__L(4, 2);
   DoubleVector m_smu(2);
   DoubleMatrix u_smu(2, 2);
   FillSMuonMixingMatrix(model, m_smu, u_smu);
   for(int i=1; i <=4; ++i) {
      for(int m=1; m <=2; ++m) {
         n__L(i, m) = ( (sqrt(.5) * ( model.get_g1()*model.get_ZN()(i, 1)
                                    + model.get_g2()*model.get_ZN()(i, 2) )
                                  * Conj(u_smu(m, 1)) )
                      - model.get_Ye()(1, 1)*model.get_ZN()(i, 3)
                                  * Conj(u_smu(m, 2)) );
      }
   }
   return n__L;
}


ComplexMatrix n_R(const @ModelName@<Two_scale>& model) {
   ComplexMatrix n__R(4, 2);
   DoubleVector m_smu(2);
   DoubleMatrix u_smu(2, 2);
   FillSMuonMixingMatrix(model, m_smu, u_smu);
   for(int i=1; i <=4; ++i) {
      for(int m=1; m <=2; ++m) {
         n__R(i, m) = ( sqrt(2.) * model.get_g1() * model.get_ZN()(i, 1) * u_smu(m, 2) 
                       + model.get_Ye()(1, 1) * model.get_ZN()(i, 3) * u_smu(m, 1) );
      }
   }
   return n__R;
}

ComplexVector c_L(const @ModelName@<Two_scale>& model) {
   ComplexVector c__L(2);
   for(int k=1; k<=2; ++k) {
      c__L(k) = - model.get_g2() * model.get_UP()(k, 1);
   }
   return c__L;
}

ComplexVector c_R(const @ModelName@<Two_scale>& model) {
   ComplexVector c__R(2);
   for(int k=1; k<=2; ++k) {
      c__R(k) = model.get_Ye()(1, 1) * model.get_UM()(k, 2);
   }

   return c__R;
}

DoubleMatrix x_im(const @ModelName@<Two_scale>& model) {
   DoubleMatrix x__im(4, 2);
   DoubleVector m_smu(2);
   DoubleMatrix u_smu(2, 2);
   FillSMuonMixingMatrix(model, m_smu, u_smu);
   for(int i=1; i <=4; ++i) {
      for(int m=1; m <=2; ++m) {
         x__im(i, m) = sqr(model.get_MChi()(i) / m_smu(m));
      }
   }

   return x__im;
}

DoubleVector x_k(const @ModelName@<Two_scale>& model) {
   DoubleVector x__k(2);
   for(int k=1; k<=2; ++k) {
      x__k(k) = sqr(model.get_MCha()(k) / model.get_MSv()(2));
   }

   return x__k;
}

double alpha_mu_chi(const @ModelName@<Two_scale>& model) {
   double alpha = 0.;
   DoubleVector m_smu(2);
   DoubleMatrix u_smu(2, 2);
   FillSMuonMixingMatrix(model, m_smu, u_smu);
   ComplexMatrix n__L = n_L(model);
   ComplexMatrix n__R = n_R(model);
   DoubleMatrix x__im = x_im(model);
   for(int i=1; i<=4; ++i) {
      for(int m=1; m<=2; ++m) {
         alpha += (- model.get_MFe()(2) * (sqr(fabs(n__L(i, m))) + sqr(fabs(n__R(i, m)))) 
                    * F1N(x__im(i, m)) / (12. * sqr(m_smu(m)))
                   + model.get_MChi()(i) * real(n__L(i, m) * n__R(i, m))
                    * F2N(x__im(i, m)) / (3. * sqr(m_smu(m))) );
      }
   }

   return alpha * model.get_MFe()(2) * oneOver16PiSqr;

}

double alpha_mu_cha(const @ModelName@<Two_scale>& model) {
   double alpha = 0.;
   ComplexVector c__L = c_L(model);
   ComplexVector c__R = c_R(model);
   DoubleVector x__k = x_k(model);
   DoubleVector MSv = model.get_MSv();
   for(int k=1; k<=2; ++k) {
      alpha += (  model.get_MFe()(2) * (sqr(fabs(c__L(k))) + sqr(fabs(c__R(k))))
                 * F1C(x__k(k)) / (12. * sqr(MSv(2)))
                + 2. * model.get_MCha()(k) * real(c__L(k) * c__R(k))
                 * F2C(x__k(k)) / (3. * sqr(MSv(2))) );
   }

   return alpha * model.get_MFe()(2) * oneOver16PiSqr;
}

double calculate_gm2_1loop(const @ModelName@<Two_scale>& model) {

   const double gm2 = ( alpha_mu_chi(model)
                      + alpha_mu_cha(model) ); //@gm2_1l@;

   return gm2;
}

/**
 * Fills 2x2 smuon mixing matrix and mass vector.
 *
 * @param model model parameter class
 * @param m smuon mass vector (size 2)
 * @param u smuon mixing matrix (size 2x2)
 */
void FillSMuonMixingMatrix(const MSSM<Two_scale>& model, DoubleVector& m,
                           DoubleMatrix& u)
{
   if (m.size() != 2)
      FATAL("Mass vector must have size 2");
   if (u.displayRows() != 2 || u.displayCols() != 2)
      FATAL("Mixing matrix must be of the form 2x2");

   const DoubleMatrix mass_matrix_6x6(model.get_mass_matrix_Se());

   DoubleMatrix mass_matrix_2x2(2,2);
   mass_matrix_2x2(1,1) = mass_matrix_6x6(2,2);
   mass_matrix_2x2(1,2) = mass_matrix_6x6(2,5);
   mass_matrix_2x2(2,1) = mass_matrix_6x6(5,2);
   mass_matrix_2x2(2,2) = mass_matrix_6x6(5,5);

   Diagonalize2by2(mass_matrix_2x2, u, m);

   int min_element;
   if (m.min(min_element) < 0.)
      ERROR("SMuon is a Tachyon");

   m = AbsSqrt(m);
}

} // namespace gm2
} // namespace flexiblesusy
