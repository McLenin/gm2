#include "test.h"
#include "test_gm2_1loop.hpp"
#include "MSSM_gm2_wrapper.hpp"

namespace flexiblesusy {
namespace gm2{

void setup(gm2::MSSM_gm2_wrapper& model)
{
   Eigen::Matrix<double,3,3> Yu;
   Eigen::Matrix<double,3,3> Yd;
   Eigen::Matrix<double,3,3> Ye;
   double Mu;
   double TB;
   double EL;
   double g3;
   double MW;
   double MZ;
   double ME = 0.00051;
   double MM = 0.104259;
   double ML = 1.777;
   double MU = 0.04151;
   double MC = 1.5;
   double MT = 173.5;
   double MD = 0.0415;
   double MS = 0.15;
   double MB = 3.;
   Eigen::Matrix<double,3,3> Ae;
   Eigen::Matrix<double,3,3> Au;
   Eigen::Matrix<double,3,3> Ad;
   Eigen::Matrix<double,3,3> TYu;
   Eigen::Matrix<double,3,3> TYd;
   Eigen::Matrix<double,3,3> TYe;
   double BMu;
   Eigen::Matrix<double,3,3> mq2;
   Eigen::Matrix<double,3,3> ml2;
   double mHd2;
   double mHu2;
   Eigen::Matrix<double,3,3> md2;
   Eigen::Matrix<double,3,3> mu2;
   Eigen::Matrix<double,3,3> me2;
   double MassB;
   double MassWB;
   double MassG;

   // susy parameters
   Yu << 1.26136e-05,          0,          0,
                   0, 0.00667469,          0,
                   0,          0,   0.857849;

   Yd << 0.000242026,          0,          0,
                   0, 0.00529911,          0,
                   0,          0,   0.193602;

   Ye << 2.84161e-05,          0,          0,
                   0, 0.00587557,          0,
                   0,          0,    0.10199;

   Mu = 627.164;
   TB = 10.;
   MW = 80.385;
   MZ = 91.1876;
   EL = 0.31218;
   g3 = 1.06459;

   // soft parameters
   Ae << 1., 0., 0.,
         0., 1., 0.,
         0., 0., 1.;

   Au << 1., 0., 0.,
         0., 1., 0.,
         0., 0., 1.;

   Ad << 1., 0., 0.,
         0., 1., 0.,
         0., 0., 1.;

   TYu << -0.0144387,        0,        0, //f^uA^u
                   0, -7.64037,        0,
                   0,        0, -759.305;

   TYd << -0.336207,        0,        0, // analog
                  0, -7.36109,        0,
                  0,        0, -250.124;

   TYe << -0.00825134,        0,        0,
                    0, -1.70609,        0,
                    0,        0, -29.4466;

   BMu = 52140.8;

   mq2 << 1.03883e+06,           0,           0,//Massenterme squarks M_q^2
                    0, 1.03881e+06,           0,
                    0,           0,      879135;

   ml2 << 124856,      0,      0,//analog
               0, 124853,      0,
               0,      0, 124142;

   mHd2 = 92436.9; // massenterme higgse m_1^2
   mHu2 = -380337; // m_2^2

   md2 << 954454,      0,      0,
               0, 954439,      0,
               0,      0, 934727;

   mu2 << 963422,      0,      0,
               0, 963400,      0,
               0,      0, 656621;

   me2 << 49215.8,       0,       0,
                0, 49210.9,       0,
                0,       0, 47759.2;

   MassB = 210.328; //massenterme superpartner eichbosonen, M_1
   MassWB = 389.189;// M_2
   MassG = 1114.45;// M_3

   // set parameters
   model.set_TB(TB);
   model.set_MW(MW);
   model.set_MZ(MZ);
   model.set_EL(EL);
   model.set_Yu(Yu);
   model.set_Yd(Yd);
   model.set_Ye(Ye);
   model.set_Ae(Ae);
   model.set_ME(ME);
   model.set_MM(MM);
   model.set_ML(ML);
   model.set_MU(MU);
   model.set_MC(MC);
   model.set_MT(MT);
   model.set_MD(MD);
   model.set_MS(MS);
   model.set_MB(MB);
   model.set_Mu(Mu);
   model.set_g3(g3);
   model.set_TYu(TYu);
   model.set_TYd(TYd);
   model.set_TYe(TYe);
   model.set_BMu(BMu);
   model.set_mq2(mq2);
   model.set_ml2(ml2);
   model.set_mHd2(mHd2);
   model.set_mHu2(mHu2);
   model.set_md2(md2);
   model.set_mu2(mu2);
   model.set_me2(me2);
   model.set_MassB(MassB);
   model.set_MassWB(MassWB);
   model.set_MassG(MassG);

   // calculate tree-level masses

   model.calculate_DRbar_parameters();
}

} // gm2
} // flexiblesusy

using namespace flexiblesusy;
using namespace gm2;

int main() {
   MSSM_gm2_wrapper model;
   setup(model);

   //model.set_g1(sqrt(5. / 3.) * 0.358494);
   //model.set_g2(0.635001);

   //Eigen::Matrix<double, 3, 3> Ye_neu(model.get_Ye());
   //double MW = model.get_MW();
   //double tan_beta = model.get_TB;
   //double cos_beta = 1. / sqrt(1. + sqr(tan_beta));
   //Ye_neu(1, 1) = model.get_MFe()(2) * model.get_g2() / (sqrt(2.) * MW * cos_beta);
   //model.set_Ye(Ye_neu);
/*
   DoubleMatrix u_smu(2, 2);
   DoubleVector m_smu(2);
   u_smu(1, 1) = 0.00859181;
   u_smu(1, 2) = 0.999963;
   u_smu(2, 1) = -0.999963;
   u_smu(2, 2) = 0.00859181;
   m_smu(2) = 356.535;
   m_smu(1) = 225.881;
   DoubleMatrix M(2, 2);
   M(1, 1) = sqr(m_smu(1));
   M(1, 2) = 0.;
   M(2, 1) = 0.;
   M(2, 2) = sqr(m_smu(2));
   INFO("M = " << u_smu.transpose() * M * u_smu);
   INFO("MassenMatrix" << model.get_mass_matrix_Se());

   model.set_USmu(u_smu);
   model.set_MSmu(m_smu);
*/
   double amuBHmuL_ = amuBHmuL(model);
   double amuBmuLmuR_ = amuBmuLmuR(model);
   double amuWHnu_ = amuWHnu(model);
   double amuWHmuL_ = amuWHmuL(model);
   double amuBHmuR_ = amuBHmuR(model);

   double amuChipm_ = amuChipm(model);
   double amuChi0_ = amuChi0(model);

   TEST_CLOSE_REL(amuBHmuL_, 4.52904e-11, 1.e-5);
   TEST_CLOSE_REL(amuBmuLmuR_, 4.51042e-10, 1.e-5);
   TEST_CLOSE_REL(amuWHnu_, 7.67164e-10, 1.e-5);
   TEST_CLOSE_REL(amuWHmuL_, -1.59782e-10, 1.e-5);
   TEST_CLOSE_REL(amuBHmuR_, -1.75346e-10, 1.e-5);

   TEST_CLOSE_REL(amuChi0_, 1.27091e-10, 1.e-4);
   TEST_CLOSE_REL(amuChipm_, 7.67285e-10, 1.e-4);

   return gErrors;
}

