#!/bin/sh

# configure script for FlexibleSUSY
# Author: Alexander Voigt

PROGRAM_NAME=FlexibleSUSY
PROGRAM_VERSION=0.3

# directory of this script
BASEDIR=$(dirname $0)

# absolute path to this script
ABSBASEDIR=$(cd $BASEDIR; pwd)

# default library directories
default_lib_paths="/usr/lib /usr/local/lib"
default_inc_paths="/usr/include /usr/local/include"

# configure log file
logfile="$BASEDIR/config.log"
statusfile="$BASEDIR/config.status"

# whether we are in 32-bit or 64-bit environment
machine_word_size=""

# target makefile
MAKEFILE=$BASEDIR/Makefile
MAKEFILE_TMPL=$BASEDIR/config/Makefile.in

# target config script
FSCONFIG=$BASEDIR/flexiblesusy-config
FSCONFIG_TMPL=$BASEDIR/config/flexiblesusy-config.in

# target config header
CONFIGHDR=$BASEDIR/config/config.h
CONFIGHDR_TMPL=$BASEDIR/config/config.h.in

# options
deprecated_options=""
options="                    \
   enable_colors             \
   enable_debug              \
   enable_looptools          \
   enable_silent             \
   enable_static_libs        \
   enable_verbose            \
"
enable_colors="no"
enable_debug=""
enable_looptools="no"
enable_silent="no"
enable_static_libs="yes"
enable_verbose="no"

boost_lib_dir=""
boost_inc_dir=""
eigen_inc_dir=""
BOOSTFLAGS=""
gsl_config="gsl-config"
lapack_lib_dir=""
looptools_lib_dir=""
looptools_inc_dir=""
GSLFLAGS=""
CPPFLAGS=""
CXXFLAGS="-std=c++11 -O2 -Wall -pedantic -Wextra -Wcast-qual\
 -Wcast-align -Woverloaded-virtual -Wnon-virtual-dtor\
 -Wno-unused-local-typedefs"
FFLAGS="-O2 -frecursive"
FLIBS=""
BOOSTTESTLIBS=""
BOOSTTHREADLIBS=""
LIBEXT=".a"
CXX="g++"
EIGENFLAGS=""
FC="gfortran"
GSLLIBS=""
LAPACKLIBS=""
MAKELIB="ar cru"
MATH="math"
# available RG algorithms
ALGORITHMS="all"
available_algorithms="two_scale lattice"
# models that will be compiled
MODELS="all"
# addons that will be compiled
ADDONS="none"

#_____________________________________________________________________
write_configure_parameters() {
    # This function writes all parameters [$*] to config.status
    configargs="$*"
    configargs=`echo $configargs | sed 's,\\\,\\\\,g'`
    echo "$configargs" > $statusfile
}

#_____________________________________________________________________
message() {
    # Write a simple message to std out
    if test $# -lt 1 ; then
        echo "message: Too few arguments"
        return 1
    fi
    echo "$*"
    logmsg "$*"
}

#_____________________________________________________________________
logmsg() {
    # Write a simple message to std out
    if test $# -lt 1 ; then
        echo "logmsg: Too few arguments"
        return 1
    fi
    if test "x$1" = "x-n"; then
       shift
       echo -n "$*" >> $logfile
    else
       echo "$*" >> $logfile
    fi
}

#_____________________________________________________________________
guess_machine_word_size() {
    chip=`uname -m | tr '[A-Z]' '[a-z]'`
    case "$chip" in
	*32) machine_word_size="32"; return 0 ;;
	*64) machine_word_size="64"; return 0 ;;
	*)   message "Warning: could not guess machine word size"; return 1 ;;
    esac
}

contains() {
    # Check if string $1 contains $2
    if test $# -lt 2 ; then
        echo "contains: Too few arguments"
        return 1
    fi
    string="$1"
    substring="$2"
    for f in ${string}; do
        if test "x$f" = "x$substring" ; then
            return 0 # found
        fi
    done
    return 1 # not found
}

contains_not() {
    # Check if string $1 contains $2
    if test $# -lt 2 ; then
        echo "contains: Too few arguments"
        return 1
    fi
    contains "$1" "$2"
    if [ $? -eq 0 ]; then
        return 1
    else
        return 0
    fi
}

#_____________________________________________________________________
check_library() {
    # This function will try to locate a library [$1] in the directory
    # given in $2 or in a default path [$*].
    #
    # The result of the search is stored in found_lib and found_dir,
    # which should be immediately copied, since the variables value will
    # be overwritten at next invocation of this function.

    # Assert that we got enough arguments
    if test $# -lt 3 ; then
        echo "check_library: Too few arguments"
        return 1
    fi

    # Save arguments in local names
    lib=$1       ; shift
    libdirl=$1
    libdirs="$*"
    # check if we got a specific argument as to where the library
    # is to be found
    if test ! "x$libdirl" = "x" ; then
        libdirs=$libdirl
    fi

    # Write a message
    checking_msg "$lib"

    libs=""
    for i in $lib ; do
        for ext in .a .lib "" .so .sl .dylib .dll.a ; do
            libs="$libs $i$ext"
        done
    done

    found_dir=""
    found_lib=""

    if test "x$machine_word_size" = "x64"; then
	for p in ${libdirs}; do
            libdir64=`echo "$p" | grep lib | sed -e 's|lib$|lib64|g' -e 's|lib/|lib64/|g'`
            libdirs="$libdirs $libdir64"
	done
    fi
    if test "x$machine_word_size" = "x32"; then
	for p in ${libdirs}; do
            libdir32=`echo "$p" | grep lib | sed -e 's|lib$|lib32|g' -e 's|lib/|lib32/|g'`
            libdirs="$libdirs $libdir32"
	done
    fi

    for p in ${libdirs}; do
        for l in ${libs}; do
            liblist=`echo $p/$l` # expands wildcard
            for n in ${liblist} ; do
                if test -f $n ; then
                    found_dir=$p
                    found_lib=$l
                    break 3
                fi
            done
        done
    done

    if test "x$found_dir" = "x" || test "x$found_lib" = "x" ; then
        result "not found in $libdirs"
    else
        result "found in $found_dir"
    fi
}

#_____________________________________________________________________
check_header() {
    # This function will try to locate a header file [$1] in the
    # directory given in $2 or in a default path [$*].
    #
    # The result of the search is stored in found_hdr and found_dir,
    # which should be immediately copied, since the variables value
    # will be overwritten at next invocation of this function.

    # Assert that we got enough arguments
    if test $# -lt 2 ; then
        echo "check_header: Too few arguments"
        return 1
    fi

    # Save arguments in local names
    hdr=$1       ; shift
    hdrdirl=$1
    hdrdirs="$*"
    # check if we got a specific argument as to where the library
    # is to be found
    if test ! "x$hdrdirl" = "x" ; then
        hdrdirs=$hdrdirl
    fi

    # Write a message
    checking_msg "$hdr"

    hdrs=""
    for i in $hdr ; do
        for ext in "" .h .hpp ; do
            hdrs="$hdrs $i$ext"
        done
    done

    found_dir=""
    found_hdr=""

    for p in ${hdrdirs}; do
        for h in ${hdrs}; do
            hdrlist=`echo $p/$h` # expands wildcard
            for n in ${hdrlist} ; do
                if test -f $n ; then
                    found_dir=$p
                    found_hdr=$hdr
                    break 3
                fi
            done
        done
    done

    if test "x$found_dir" = "x" || test "x$found_hdr" = "x" ; then
        result "not found in $hdrdirs"
    else
        result "found in $found_dir"
    fi
}

#_____________________________________________________________________
checking_msg() {
    # Write a simple "checking" message to std out.
    if test $# -lt 1 ; then
        echo "checking_msg: Too few arguments"
        return 1
    fi
    echo -n "Checking for"
    logmsg -n "Checking for"
    while test $# -gt 1 ; do
        echo -n " $1,"
        logmsg -n " $1,"
        shift
        if test $# -eq 1 ; then
            echo -n " or"
            logmsg -n " or"
        fi
    done
    echo -n " $1 ... "
    logmsg -n " $1 ... "
}

#_____________________________________________________________________
result() {
    echo "$*"
    logmsg "Result: $*"
}

#_____________________________________________________________________
check_symbol() {
    # This function will try to locate a symbol [$1] in a specific
    # library [$2] and in a given directory [$3].
    # The result of the check is stored in found_symbol, 1 if true,
    # 0 otherwise, which should be immediately copied, since the variable
    # will be overwritten at next invocation of this function.

    # Assert that we got enough arguments
    if test $# -ne 3 ; then
        echo "check_symbol: not 3 arguments"
        found_symbol=0
        return 1
    fi

    # Save arguments in logical names
    symbol=$1     ; shift
    symbollib=$1  ; shift
    symboldir=$1

    if test "x$symbollib" = "x" ; then
        found_symbol=0
        unset symbol
        unset symbollib
        unset symboldir
        return 1
    fi

    symbollib=`echo $symbollib | sed -e 's/^-l/lib/'`

    if test ! "x$symboldir" = "x" ; then
        symboldir=`echo $symboldir | sed -e 's/^-L//'`
    fi

    # Check if we got a specific argument as to where the library
    # is to be found
    symbolfile=$symbollib
    exts=".so .lib .dylib"
    if test ! "x$shared" = "xno" ; then
        exts="$exts .a"
    else
        exts=".a $exts"
    fi

    usrlib="/usr/lib"
    if test "x$machine_word_size" = "x32" ; then
        usrlib="/usr/lib32 $usrlib"
    fi
    if test "x$machine_word_size" = "x64" ; then
        usrlib="/usr/lib64 $usrlib"
    fi

    for d in "$symboldir" $usrlib ; do
        logmsg " Checking in $d"
        if test ! -r $d/$symbollib ; then
            logmsg "  $d/$symbollib not readable"
            for i in $exts ; do
                logmsg "   Checking extension $i with $d/$symbollib"
                if test -r $d/$symbollib$i ; then
                    logmsg "   $d/$symbollib$i readable"
                    symbolfile=$d/$symbollib$i
                    break 2
                fi
             done
        else
            logmsg "  $d/$symbollib readable"
            symbolfile=$d/$symbollib
            break
        fi
    done

    if test "x$symbolfile" = "x" || test ! -r $symbolfile ; then
       found_symbol=0
       logmsg " Symbol not found"
       unset symbol
       unset symbollib
       unset symboldir
       return 1
    fi

    checking_msg "$symbol in $symbolfile"
    nm $symbolfile 2>&1 | grep $symbol > /dev/null 2>&1 ||
    nm -D $symbolfile 2>&1 | grep $symbol > /dev/null 2>&1
    if test $? -eq 0 ; then
        found_symbol=1
        logmsg " Symbol found"
    else
        nm $symbolfile 2>&1 | grep "no symbols" > /dev/null 2>&1
        # if test $? -eq 0 ; then
        #     logmsg " $symbolfile is stripped, trying to link"
        #     # stripped library - only safe test is to link against the library
        #     check_link $symbolfile "" $symbol
        #     found_symbol=$link_result
        # else
            found_symbol=0
        # fi
    fi
    if test $found_symbol -eq 1 ; then
        result "ok"
    else
        result "no"
    fi

    unset symbol
    unset symbollib
    unset symboldir
}

#_____________________________________________________________________
use_algorithm() {
    # This function tests if a certain algorithm [$1] is used.

    # Assert that we got enough arguments
    if test $# -ne 1 ; then
        echo "use_algorithm: Exactly one argument required"
        return 1
    fi

    # check that the argument is an algorithm
    alg=`echo "$available_algorithms" | grep $1`
    if [ -z "$alg" ]; then
	message "Error: $1 is not an available algorithm"
	exit 1
    fi

    # check if the argument is in the list of used algorithms
    alg=`echo "$ALGORITHMS" | grep $1`
    if [ -z "$alg" ]; then
	return 1;
    else
	return 0;
    fi
}

#_____________________________________________________________________
exists_in_path () {
    # This function will try to locate an executable [$1] in $PATH.
    #
    # The result of the search is stored in cmd, which should be
    # immediately copied, since the variables value will be
    # overwritten at next invocation of this function.

    # Assert that we got enough arguments
    if test $# -ne 1 ; then
        echo "exists_in_path: Exactly one argument required"
        return 1
    fi

    cmd=$(command -v -- "$1")
    case "$cmd" in
	/*) return 0 ;;
	alias\ *) return 1 ;; # alias
	*) return 1 ;; # built-in or function
    esac
}

#_____________________________________________________________________
check_algorithms() {
    algs=`echo $ALGORITHMS | tr ',' ' '`
    ALGORITHMS=""
    for a in ${algs}; do
        case "$a" in
            all)
                ALGORITHMS="$available_algorithms"; break ;;
            two_scale|lattice)
                ALGORITHMS="$ALGORITHMS $a"
                continue ;;
            *)
                message "Error: unknown algorithm: $a";
                message "Available algorithms: $available_algorithms";
                exit 1 ;;
        esac
    done
}

#_____________________________________________________________________
check_models() {
    models=`echo $MODELS | tr ',' ' '`
    MODELS=""
    for a in ${models}; do
        case "$a" in
            all)
                MODELS=`find $BASEDIR/models/* -maxdepth 0 -type d -print0 | tr '\0' ' ' | sed -e 's|^\./||' -e 's| \./| |g' -e 's| *$||g'`
                break ;;
            *)
                if test -d "$BASEDIR/models/$a" ; then
                    MODELS="$MODELS models/$a"
                    continue
                else
                    message "Error: model directory \"$BASEDIR/models/$a\" does not exist!"
                    message "Please create the directory and put a model file in it."
                    message "You can use \`./createmodel --models=<model>' to create one."
                    exit 1
                fi ;;
        esac
    done
}

#_____________________________________________________________________
check_addons() {
    addons=`echo $ADDONS | tr ',' ' '`
    ADDONS=""
    for a in ${addons}; do
        case "$a" in
            all)
                ADDONS=`find $BASEDIR/addons/* -maxdepth 0 -type d -print0 | tr '\0' ' ' | sed -e 's|^\./||' -e 's| \./| |g' -e 's| *$||g'`
                break ;;
            none)
                ADDONS=""
                break ;;
            *)
                if test -d "$BASEDIR/addons/$a" ; then
                    ADDONS="$ADDONS addons/$a"
                    continue
                else
                    message "Error: addon directory \"$BASEDIR/addons/$a\" does not exist!"
                    message "Please create the directory and put an addon in it."
                    exit 1
                fi ;;
        esac
    done
}

#_____________________________________________________________________
check_boost_test_libs() {
    check_library "libboost_unit_test_framework" "$boost_lib_dir" \
	"$default_lib_paths"
    if test "x$found_lib" = "x" ; then
        message "Warning: libboost_unit_test_framework must be installed"
        message "  to compile and run the tests, see http://www.boost.org"
    else
        BOOSTTESTLIBS_=-lboost_unit_test_framework
        if [ -z "$boost_lib_dir" ]; then
            # assume that the linker will look in the default paths
            BOOSTTESTLIBS="$BOOSTTESTLIBS_"
        else
            BOOSTTESTLIBS="-L$boost_lib_dir $BOOSTTESTLIBS_"
        fi
    fi
}

#_____________________________________________________________________
check_boost_test_incl() {
    check_header "boost/test/unit_test.hpp" "$boost_inc_dir" \
	"$default_inc_paths"
    if test "x$found_hdr" = "x" ; then
        message "Warning: boost/test/unit_test.hpp must be installed"
        message "  to compile and run the tests, see http://www.boost.org"
    else
        # assume that the compiler will look in the default paths
        if [ -n "$boost_inc_dir" ]; then
            BOOSTFLAGS="-I$boost_inc_dir"
        fi
    fi
}

#_____________________________________________________________________
check_boost_thread_libs() {
    check_library "libboost_thread libboost_thread-mt" \
	"$boost_lib_dir" "$default_lib_paths"
    if test "x$found_lib" = "x" ; then
        message "Error: libboost_thread or libboost_thread-mt must be installed"
        message "  to enable multithreading in the lattice method, see http://www.boost.org"
        message "  You can disable the lattice method with the --with-algorithms= flag."
        exit 1
    else
        BOOSTTHREADLIBS_=-l$(echo -n "$found_lib" | sed 's/^lib\(.*\)\..*$/\1/')
        if [ -z "$boost_lib_dir" ]; then
            # assume that the linker will look in the default paths
            BOOSTTHREADLIBS="$BOOSTTHREADLIBS_"
        else
            BOOSTTHREADLIBS="-L$boost_lib_dir $BOOSTTHREADLIBS_"
        fi
    fi
}

#_____________________________________________________________________
check_boost_thread_incl() {
    check_header "boost/thread/thread.hpp" "$boost_inc_dir" \
	"$default_inc_paths"
    if test "x$found_hdr" = "x" ; then
        message "Error: boost/thread/thread.hpp must be installed"
        message "  to enable multithreading in the lattice method, see http://www.boost.org"
        message "  You can disable the lattice method with the --with-algorithms= flag."
        exit 1
    else
        # assume that the compiler will look in the default paths
        if [ -n "$boost_inc_dir" ]; then
            BOOSTFLAGS="-I$boost_inc_dir"
        fi
    fi
}

#_____________________________________________________________________
check_cxx() {
    checking_msg "C++ compiler $CXX"
    exists_in_path "$CXX"
    if [ -z "$cmd" ] ; then
        result "not found"
        message "Error: A C++ compiler must be installed to compile the models!"
        exit 1
    else
        result "found $cmd"
    fi
}

#_____________________________________________________________________
check_eigen_incl() {
    eigen_inc_paths="$default_inc_paths /usr/include/eigen3 \
                     /usr/local/include/eigen3"
    check_header "Eigen/Core" "$eigen_inc_dir" "$eigen_inc_paths"
    if test "x$found_hdr" = "x" ; then
        message "Error: Eigen 3 must be installed, see http://eigen.tuxfamily.org"
        exit 1
    else
        EIGENFLAGS="-I$found_dir"
    fi
}

#_____________________________________________________________________
check_gsl_config() {
    checking_msg "GSL configuration $gsl_config"
    exists_in_path "$gsl_config"
    if [ -z "$cmd" ] ; then
        result "not found"
        message "Error: Gnu Scientific Library (GSL) needs to be installed!"
        message "  Either add the path to the \`gsl-config' program to \$PATH or"
        message "  use $0 --with-gsl-config=<path to gsl-config>"
        exit 1
    else
        result "found $cmd"
        GSLFLAGS=`$cmd --cflags`
        GSLLIBS=`$cmd --libs`
    fi
}

#_____________________________________________________________________
check_fc() {
    checking_msg "Fortran compiler $FC"
    exists_in_path "$FC"
    if [ -z "$cmd" ] ; then
        result "not found"
        message "Error: A Fortran compiler must be installed to compile the\
 two-loop MSSM Higgs contributions"
        exit 1
    else
        result "found $cmd"
    fi
}

#_____________________________________________________________________
check_fortran_libs() {
    case "$FC" in
        gfortran)
            gfortran_lib_search_paths=`gfortran -print-search-dirs | sed -n -e '/libraries:/s/libraries: *=//p' | tr ':' ' '`
            check_library "libgfortran" "$gfortran_lib_search_paths" "$default_lib_paths"
            if test "x$found_lib" = "x" ; then
                message "Error: libgfortran not found in $gfortran_lib_search_paths $default_lib_paths"
                exit 1
            else
                FLIBS="-L$found_dir -lgfortran -lm"
            fi ;;
        g77|f77)
            FLIBS="-lg2c -lm" ;;
    esac
}

#_____________________________________________________________________
check_lapack_libs_using_options() {
    check_library "liblapack" "$lapack_lib_dir" \
	"$default_lib_paths"
    if test "x$found_lib" = "x" ; then
        message "Error: liblapack must be installed"
        message "  to run the lattice algorithm, see http://www.netlib.org/lapack"
        message "  You can disable the lattice algorithm with the"
        message "  --with-algorithms= flag"
        exit 1
    else
        LAPACKLIBS_=-llapack
        if [ -z "$lapack_lib_dir" ]; then
            # assume that the linker will look in the default paths
            LAPACKLIBS="$LAPACKLIBS_"
        else
            LAPACKLIBS="-L$lapack_lib_dir $LAPACKLIBS_"
        fi
	check_symbol dgbsv_ "$found_lib" "$found_dir"
    fi
}

#_____________________________________________________________________
check_looptools_libs() {
    check_library "libooptools" "$looptools_lib_dir" \
	"$default_lib_paths"
    if test "x$found_lib" = "x" ; then
        message "Error: libooptools must be installed if you want"
        message "  to use LoopTools, see http://www.feynarts.de/looptools/"
        exit 1
    else
        LOOPTOOLSLIBS_="-looptools"
        if [ -z "$looptools_lib_dir" ]; then
            # assume that the linker will look in the default paths
            LOOPTOOLSLIBS="$LOOPTOOLSLIBS_"
        else
            LOOPTOOLSLIBS="-L$looptools_lib_dir $LOOPTOOLSLIBS_"
        fi
    fi
}

#_____________________________________________________________________
check_looptools_incl() {
    check_header "clooptools.h" "$looptools_inc_dir" \
	"$default_inc_paths"
    if test "x$found_hdr" = "x" ; then
        message "Error: clooptools.h must be installed if you want"
        message "  to use LoopTools, see http://www.feynarts.de/looptools/"
        exit 1
    else
        # assume that the compiler will look in the default paths
        if [ -n "$looptools_inc_dir" ]; then
            LOOPTOOLSFLAGS="-I$looptools_inc_dir"
        fi
    fi
}

#_____________________________________________________________________
find_symbol_using_pkgconfig() {
    local symbol
    local pkg
    local ldpaths
    local libnames
    symbol="$1"
    pkg="$2"
    linker_flags=""
    type pkg-config > /dev/null 2>&1 || {
	logmsg "pkg-config not found"
	return 1
    }
    pkg-config --exists "$pkg" || {
	logmsg "pkg-config does not manage $pkg"
	return 1
    }
    ldpaths=$(pkg-config --libs-only-L "$pkg")
    libnames=$(pkg-config --libs-only-l "$pkg")
    for dopt in $default_lib_paths $ldpaths; do
	for lopt in $libnames; do
	    if check_symbol "$symbol" "$lopt" "$dopt"; then
		logmsg "found $symbol in $dopt $lopt"
		linker_flags=$(pkg-config --libs "$pkg")
		return 0
	    fi
	done
    done
    return 1
}

#_____________________________________________________________________
check_lapack_libs() {
    if find_symbol_using_pkgconfig dgbsv_ lapack; then
	LAPACKLIBS="$linker_flags"
    else
	check_lapack_libs_using_options
    fi
}

#_____________________________________________________________________
check_makelib() {
    checking_msg "build library command $MAKELIB"
    # strip arguments from the actual command
    makelib_cmd=`echo $MAKELIB | awk '{ print $1; }'`

    # check if $makelib_cmd can create shared libraries
    if test "x$enable_static_libs" = "xno" ; then
        if test "x$makelib_cmd" = "xar" ; then
            message "\n   Error: $makelib_cmd cannot be used to create shared libraries!"
            message "   Please use --make-lib-cmd=\"gcc -shared -o\" or something similar."
            exit 1
        fi
    fi

    exists_in_path "$makelib_cmd"
    if [ -z "$cmd" ] ; then
        result "not found"
        message "Error: A program which builds libraries must be installed!"
        exit 1
    else
        result "found $cmd"
    fi
}

#_____________________________________________________________________
check_math_cmd() {
    checking_msg "Mathematica kernel $MATH"
    exists_in_path "$MATH"
    if [ -z "$cmd" ] ; then
        result "not found"
        message "Error: Mathematica needs to be installed to run the meta code!"
        exit 1
    else
        result "found $cmd"
    fi
}

#_____________________________________________________________________
enable_defines() {
    if test "x$enable_colors" = "xyes" ; then
        message "Enabling colored output -DCOLOR_PRINTOUT"
        CPPFLAGS="$CPPFLAGS -DCOLOR_PRINTOUT"
    fi

    if test "x$enable_debug" = "xyes" ; then
        message "Enabling debug mode -DDEBUG"
        CPPFLAGS="$CPPFLAGS -DDEBUG"
        CXXFLAGS="$CXXFLAGS -g"
        FFLAGS="$FFLAGS -g"
    fi

    if test "x$enable_debug" = "xno" ; then
        message "Disabling debug mode and removing assertions -UDEBUG -DNDEBUG"
        CPPFLAGS="$CPPFLAGS -UDEBUG -DNDEBUG"
    fi

    if test "x$enable_looptools" = "xyes" ; then
        message "Enabling usage of LoopTools -DENABLE_LOOPTOOLS"
        CPPFLAGS="$CPPFLAGS -DENABLE_LOOPTOOLS"
    fi

    if test "x$enable_silent" = "xyes" ; then
        message "Enabling silent mode -DSILENT"
        CPPFLAGS="$CPPFLAGS -DSILENT"
    fi

    if test "x$enable_static_libs" = "xno" ; then
        # check if -fPIC is in CXXFLAGS and FFLAGS
        if test "x$CXX" = "xg++" -o "x$CXX" = "xclang++" ; then
            if contains_not "$CXXFLAGS" "-fPIC" ; then
                message "  Warning: could not find -fPIC in CXXFLAGS, appending it"
                CXXFLAGS="$CXXFLAGS -fPIC"
            fi
        fi
        if test "x$FC" = "xgfortran" ; then
            if contains_not "$FFLAGS" "-fPIC" ; then
                message "  Warning: could not find -fPIC in FFLAGS, appending it"
                FFLAGS="$FFLAGS -fPIC"
            fi
        fi
        # check the library extension
        if test "x$LIBEXT" = "x.a" ; then
            message "  Warning: library extension $LIBEXT is reserved for static libraries."
            message "    Please consider using .so as library extension, or similar, e.g."
            message "    --libext=\".so\""
        fi
    fi

    if test "x$enable_verbose" = "xyes" ; then
        if test "x$enable_silent" = "xyes" ; then
            message "Warning: ignoring --enable-verbose because silent mode is enabled!"
        else
            message "Enabling verbose mode -DVERBOSE"
            CPPFLAGS="$CPPFLAGS -DVERBOSE"
        fi
    fi
}

#_____________________________________________________________________
help() {
cat <<EOF
Usage: ./`basename $0` [options]
Options:

  --help,-h         Print this help message
  --libext          Library extension (default: $LIBEXT)
  --make-lib-cmd    Command to make library (default: $MAKELIB)
  --version,-v      Print version information

enable/disable options, prefix with either --enable- or --disable-

  colors            Colored output
  debug             Debug messages and assertions
  looptools         Use LoopTools to compute the loop functions
  silent            Suppress all command line output
  static-libs       Create static libraries (default: $enable_static_libs)
  verbose           Verbose messages

with options, prefix with --with-, enables corresponding support

  addons            Comma separated list of addons to be build
                    (default: $ADDONS)
                    possible values: all none <addon1>,<addon2>,...
  algorithms        Comma separated list of RG solver algorithms
                    (default: $ALGORITHMS)
                    possible values: all $available_algorithms
  boost-libdir      Path to search for BOOST libraries
  boost-incdir      Path to search for BOOST headers
  eigen-incdir      Path to search for Eigen headers
  cxx               C++ compiler (default: $CXX)
  cxxflags          C++ compiler flags (default: $CXXFLAGS)
  fc                Fortran compiler (default: $FC)
  fflags            Fortran compiler flags (default: $FFLAGS)
  gsl-config        Path to gsl-config (default: $gsl_config)
  lapack-libdir     Path to search for LAPACK and BLAS libraries
  looptools-libdir  Path to search for LoopTools libraries
  looptools-incdir  Path to search for LoopTools headers
  math-cmd          Mathematic kernel (default: $MATH)
  models            Comma separated list of models to be build
                    (default: $MODELS)
                    possible values: all <model1>,<model2>,...
EOF
}

#_____________________________________________________________________
version() {
cat <<EOF
$PROGRAM_NAME $PROGRAM_VERSION
$PROGRAM_NAME is free software: you can redistribute it and/or modify
it under the terms of the GNU General Public License as published by
the Free Software Foundation, either version 3 of the License, or
(at your option) any later version.  See http://www.gnu.org/licenses/
EOF
}

rm -f $logfile
write_configure_parameters "$*"

if test $# -gt 0 ; then
    while test ! "x$1" = "x" ; do
        case "$1" in
            -*=*) optarg=`echo "$1" | sed 's/[-_a-zA-Z0-9]*=//'` ;;
            *) optarg= ;;
        esac

        case $1 in
            --enable-*)
                f=`echo $1 | sed -e 's/--//' -e 's/-/_/g'`
                eval prev='$'`echo ${f}`
                if test "x${prev}" = "xyes"; then
                    echo "INFO: $1: already enabled by default."
                fi
                if test ! "x`echo ${deprecated_options} | grep ${f}`" = "x"; then
                    echo "WARNING: option $1 is deprecated and ignored"'!'
                fi
                eval ${f}=yes
                for c in $options ; do
                    if test "x$c" = "x$f" ; then
                        f=""
                    fi
                done
                for c in $deprecated_options ; do
                    if test "x$c" = "x$f" ; then
                        f=""
                    fi
                done
                if test "x$f" != "x" ; then
                    echo "Invalid option '$1'. Try $0 --help" ; exit 1 ;
                fi
                ;;
            --disable-*)
                f=`echo $1 | sed -e 's/--disable/enable/' -e 's/-/_/g'`
                eval prev='$'`echo ${f}`
                if test "x${prev}" = "xno"; then
                    echo "INFO: $1: already disabled by default."
                fi
                eval ${f}=no
                for c in $options ; do
                    if test "x$c" = "x$f" ; then
                        f=""
                    fi
                done
                if test "x$f" != "x" ; then
                    echo "Invalid option '$1'. Try $0 --help" ; exit 1 ;
                fi
                ;;
            --with-addons=*)         ADDONS=$optarg ;;
            --with-algorithms=*)     ALGORITHMS=$optarg ;;
            --with-boost-libdir=*)   boost_lib_dir=$optarg ;;
            --with-boost-incdir=*)   boost_inc_dir=$optarg ;;
            --with-cxx=*)            CXX=$optarg ;;
            --with-cxxflags=*)       CXXFLAGS=$optarg ;;
            --with-eigen-incdir=*)   eigen_inc_dir=$optarg ;;
            --with-fc=*)             FC=$optarg ;;
            --with-fflags=*)         FFLAGS=$optarg ;;
            --with-gsl-config=*)     gsl_config=$optarg ;;
            --with-lapack-libdir=*)  lapack_lib_dir=$optarg ;;
            --with-looptools-libdir=*) looptools_lib_dir=$optarg ;;
            --with-looptools-incdir=*) looptools_inc_dir=$optarg ;;
            --with-math-cmd=*)       MATH=$optarg ;;
            --with-models=*)         MODELS=$optarg ;;
            --help|-h)               help; exit 0 ;;
            --libext=*)              LIBEXT=$optarg ;;
            --make-lib-cmd=*)        MAKELIB=$optarg ;;
            --version|-v)            version; exit 0 ;;
            *)  echo "Invalid option '$1'. Try $0 --help" ; exit 1 ;;
        esac
        shift
    done
fi

guess_machine_word_size

check_algorithms
check_boost_test_incl
check_boost_test_libs
check_cxx
check_fc
check_eigen_incl
check_fortran_libs
check_gsl_config
if use_algorithm "lattice"; then
    check_boost_thread_incl
    check_boost_thread_libs
    check_lapack_libs
fi
if test "x$enable_looptools" = "xyes"; then
    check_looptools_incl
    check_looptools_libs
fi
check_makelib
check_math_cmd
check_models
check_addons

enable_defines

sed -e "s|@VERSION@|$PROGRAM_VERSION|" \
    -e "s|@PKGNAME@|$PROGRAM_NAME|"    \
    -e "s|@ABSBASEDIR@|$ABSBASEDIR|"   \
    -e "s|@ADDONS@|$ADDONS|"           \
    -e "s|@ALGORITHMS@|$ALGORITHMS|"   \
    -e "s|@BOOSTTESTLIBS@|$BOOSTTESTLIBS|"     \
    -e "s|@BOOSTTHREADLIBS@|$BOOSTTHREADLIBS|"     \
    -e "s|@BOOSTFLAGS@|$BOOSTFLAGS|"   \
    -e "s|@CPPFLAGS@|$CPPFLAGS|"       \
    -e "s|@CXXFLAGS@|$CXXFLAGS|"       \
    -e "s|@CXX@|$CXX|"                 \
    -e "s|@FC@|$FC|"                   \
    -e "s|@EIGENFLAGS@|$EIGENFLAGS|"   \
    -e "s|@FFLAGS@|$FFLAGS|"           \
    -e "s|@FLIBS@|$FLIBS|"             \
    -e "s|@FSCONFIG@|$FSCONFIG|"       \
    -e "s|@GSLLIBS@|$GSLLIBS|"         \
    -e "s|@GSLFLAGS@|$GSLFLAGS|"       \
    -e "s|@LAPACKLIBS@|$LAPACKLIBS|"   \
    -e "s|@ENABLE_LOOPTOOLS@|$enable_looptools|" \
    -e "s|@LOOPTOOLSLIBS@|$LOOPTOOLSLIBS|"    \
    -e "s|@LOOPTOOLSFLAGS@|$LOOPTOOLSFLAGS|"  \
    -e "s|@MODELS@|$MODELS|"           \
    -e "s|@MAKELIB@|$MAKELIB|"         \
    -e "s|@ENABLE_STATIC_LIBS@|$enable_static_libs|" \
    -e "s|@MATH@|$MATH|"               \
    -e "s|@LIBEXT@|$LIBEXT|"           \
    < $MAKEFILE_TMPL > $MAKEFILE

sed -e "s|@VERSION@|$PROGRAM_VERSION|" \
    -e "s|@PKGNAME@|$PROGRAM_NAME|"    \
    -e "s|@ADDONS@|$ADDONS|"           \
    -e "s|@CPPFLAGS@|$CPPFLAGS|"       \
    -e "s|@CXXFLAGS@|$CXXFLAGS|"       \
    -e "s|@CXX@|$CXX|"                 \
    -e "s|@FC@|$FC|"                   \
    -e "s|@FFLAGS@|$FFLAGS|"           \
    -e "s|@FLIBS@|$FLIBS|"             \
    -e "s|@MAKELIB@|$MAKELIB|"         \
    -e "s|@MATH@|$MATH|"               \
    -e "s|@MODELS@|$MODELS|"           \
    < $FSCONFIG_TMPL > $FSCONFIG

sed -e "s|@VERSION@|$PROGRAM_VERSION|" \
    -e "s|@PKGNAME@|$PROGRAM_NAME|"    \
    < $CONFIGHDR_TMPL > $CONFIGHDR

echo "$PROGRAM_VERSION" > $BASEDIR/config/version

chmod a+x $FSCONFIG
