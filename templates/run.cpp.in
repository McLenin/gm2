// ====================================================================
// This file is part of FlexibleSUSY.
//
// FlexibleSUSY is free software: you can redistribute it and/or modify
// it under the terms of the GNU General Public License as published
// by the Free Software Foundation, either version 3 of the License,
// or (at your option) any later version.
//
// FlexibleSUSY is distributed in the hope that it will be useful, but
// WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
// General Public License for more details.
//
// You should have received a copy of the GNU General Public License
// along with FlexibleSUSY.  If not, see
// <http://www.gnu.org/licenses/>.
// ====================================================================

// File generated at @DateAndTime@

#include "@ModelName@_input_parameters.hpp"
#include "@ModelName@_slha_io.hpp"
#include "@ModelName@_spectrum_generator.hpp"

#include "error.hpp"
#include "program_options.hpp"
#include "lowe.h"
#include "command_line_options.hpp"

#include <iostream>

int main(int argc, const char* argv[])
{
   using namespace flexiblesusy;
   using namespace softsusy;
   typedef Two_scale algorithm_type;

   Command_line_options options(argc, argv);
   if (options.must_exit())
      return options.status();

   const std::string slha_input_file(options.get_slha_input_file());
   const std::string slha_output_file(options.get_slha_output_file());
   @ModelName@_slha_io slha_io;
   Program_options program_options;
   QedQcd oneset;
   @ModelName@_input_parameters input;

   if (!slha_input_file.empty()) {
      try {
         slha_io.read_from_file(slha_input_file);
         slha_io.fill(oneset);
         slha_io.fill(input);
         slha_io.fill(program_options);
      } catch (const Error& error) {
         ERROR(error.what());
         return 1;
      }
   }
   oneset.toMz(); // run SM fermion masses to MZ

   @ModelName@_spectrum_generator<algorithm_type> spectrum_generator;
   spectrum_generator.set_precision_goal(program_options.get(Program_options::precision));
   spectrum_generator.set_max_iterations(program_options.get(Program_options::max_iterations));
   spectrum_generator.set_calculate_sm_masses(
      program_options.get(Program_options::calculate_sm_masses) >= 1.0);
   spectrum_generator.set_parameter_output_scale(slha_io.get_parameter_output_scale());
   spectrum_generator.set_pole_mass_loop_order(
      program_options.get(Program_options::pole_mass_loop_order));
   spectrum_generator.set_ewsb_loop_order(
      program_options.get(Program_options::ewsb_loop_order));

   spectrum_generator.run(oneset, input);

   if (slha_output_file.empty()) {
      if (spectrum_generator.get_problems().have_serious_problem()) {
         spectrum_generator.get_problems().print();
      } else {
         spectrum_generator.get_model().print(std::cout);
         // spectrum_generator.write_spectrum("@ModelName@_spectrum.dat");
         // spectrum_generator.write_running_couplings("@ModelName@_rge_running.dat");
      }
   } else {
      slha_io.set_spinfo(spectrum_generator.get_problems());
      if (!spectrum_generator.get_problems().have_serious_problem())
         slha_io.set_spectrum(spectrum_generator.get_model());
      slha_io.write_to_file(slha_output_file);
   }

   return 0;
}
